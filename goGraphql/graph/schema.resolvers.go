package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"fmt"
	"time"

	"github.com/desarso/goGraphql/graph/model"
)

// CreateChessGame is the resolver for the createChessGame field.
func (r *mutationResolver) CreateChessGame(ctx context.Context, fen string, gameID string, receiverID string, requesterID string, requesterColor string) (*model.ChessGame, error) {
	chessGame := &model.ChessGame{
		ID:            gameID,
		ReceiverID:    receiverID,
		ReceiverColor: requesterColor,
		RequesterID:   requesterID,
		Fen:           fen,
		Turn:          "white",
		Started:       false,
		Moves:         []*model.ChessMove{},
		Users:         []*model.ChessUser{},
	}
	r.chessGames = append(r.chessGames, chessGame)
	r.chessGamesChannel <- chessGame
	return chessGame, nil
}

// AddChessUser is the resolver for the addChessUser field.
func (r *mutationResolver) AddChessUser(ctx context.Context, id string, username string, catURL string) (*model.ChessUser, error) {
	time := time.Now().UnixMilli()
	//tunr time to a string
	var timeString = fmt.Sprintf("%d", time)
	chessUser := &model.ChessUser{
		ID:            id,
		Username:      username,
		LastSeen:      timeString,
		CatURL:        catURL,
		ChessRequests: []*model.ChessRequest{},
	}
	r.chessUsers = append(r.chessUsers, chessUser)
	r.chessUsersChannel <- r.chessUsers
	return chessUser, nil
}

// DeleteChessUser is the resolver for the deleteChessUser field.
func (r *mutationResolver) DeleteChessUser(ctx context.Context, id string) (*model.ChessUser, error) {
	//find the user
	for i, user := range r.chessUsers {
		if user.ID == id {
			//delete the user
			r.chessUsers = append(r.chessUsers[:i], r.chessUsers[i+1:]...)
			r.chessUsersChannel <- r.chessUsers
			return user, nil
		}
	}
	return nil, nil
}

// ChangeFen is the resolver for the changeFen field.
func (r *mutationResolver) ChangeFen(ctx context.Context, id string, fen string) (*model.ChessGame, error) {
	//find the game
	for _, game := range r.chessGames {
		if game.ID == id {
			//change the fen
			game.Fen = fen
			r.chessGamesChannel <- game
			return game, nil
		}
	}
	return nil, nil
}

// ChangeChessTurn is the resolver for the changeChessTurn field.
func (r *mutationResolver) ChangeChessTurn(ctx context.Context, id string, turn string) (*model.ChessGame, error) {
	//find the game
	for _, game := range r.chessGames {
		if game.ID == id {
			//change the turn
			game.Turn = turn
			r.chessGamesChannel <- game
			return game, nil
		}
	}
	return nil, nil
}

// UpdateLastSeenChess is the resolver for the updateLastSeenChess field.
func (r *mutationResolver) UpdateLastSeenChess(ctx context.Context, id string) (*model.ChessUser, error) {
	//find the user
	for _, user := range r.chessUsers {
		if user.ID == id {
			//update the last seen
			time := time.Now().UnixMilli()
			//tunr time to a string
			var timeString = fmt.Sprintf("%d", time)
			user.LastSeen = timeString
			r.chessUsersChannel <- r.chessUsers
			return user, nil
		}
	}
	return nil, nil
}

// SendChessRequest is the resolver for the sendChessRequest field.
func (r *mutationResolver) SendChessRequest(ctx context.Context, gameID string, requesterID string, requesterColor string, receiverID string) (*model.ChessUser, error) {
	//find the user
	for _, user := range r.chessUsers {
		if user.ID == receiverID {
			//add the request to the user
			chessRequest := &model.ChessRequest{
				GameID:         gameID,
				RequesterID:    requesterID,
				RequesterColor: requesterColor,
				ReceiverID:     receiverID,
			}
			user.ChessRequests = append(user.ChessRequests, chessRequest)
			r.chessRequestsChannel <- chessRequest
			return user, nil
		}
	}
	return nil, nil
}

// StartChessGame is the resolver for the startChessGame field.
func (r *mutationResolver) StartChessGame(ctx context.Context, gameID string) (*model.ChessGame, error) {
	//find the game
	for _, game := range r.chessGames {
		if game.ID == gameID {
			//start the game
			game.Started = true
			r.chessGamesChannel <- game
			return game, nil
		}
	}
	return nil, nil
}

// MoveChessPiece is the resolver for the moveChessPiece field.
func (r *mutationResolver) MoveChessPiece(ctx context.Context, from string, to string, endFen string, gameID string, promotion *string) (*model.ChessGame, error) {
	//find the game
	for _, game := range r.chessGames {
		if game.ID == gameID {
			//add the move to the game
			chessMove := &model.ChessMove{
				From:      from,
				To:        to,
				Promotion: promotion,
				EndFen:    endFen,
			}
			game.Moves = append(game.Moves, chessMove)
			r.chessGamesChannel <- game
			return game, nil
		}
	}
	return nil, nil
}

// GetChessGames is the resolver for the getChessGames field.
func (r *queryResolver) GetChessGames(ctx context.Context) ([]*model.ChessGame, error) {
	return r.chessGames, nil
}

// GetChessGame is the resolver for the getChessGame field.
func (r *queryResolver) GetChessGame(ctx context.Context, id string) (*model.ChessGame, error) {
	//find the game
	for _, game := range r.chessGames {
		if game.ID == id {
			return game, nil
		}
	}
	return nil, nil
}

// GetUsers is the resolver for the getUsers field.
func (r *queryResolver) GetUsers(ctx context.Context) ([]*model.ChessUser, error) {
	return r.chessUsers, nil
}

// ChessGame is the resolver for the chessGame field.
func (r *subscriptionResolver) ChessGame(ctx context.Context, id string) (<-chan *model.ChessGame, error) {
	r.chessGamesChannel = make(chan *model.ChessGame)

	go func() {
		for {
			//find the game
			var foundGame *model.ChessGame
			for _, game := range r.chessGames {
				if game.ID == id {

					foundGame = game
				}
			}
			select {
			case r.chessGamesChannel <- foundGame:

			default:
				fmt.Println("Channel closed")

				return
			}
		}
	}()
	return r.chessGamesChannel, nil
}

// ChessUsers is the resolver for the chessUsers field.
func (r *subscriptionResolver) ChessUsers(ctx context.Context) (<-chan []*model.ChessUser, error) {
	r.chessUsersChannel = make(chan []*model.ChessUser)
	go func() {
		for {
			select {
			case r.chessUsersChannel <- r.chessUsers:

			default:
				fmt.Println("Channel closed")

				return
			}
		}
	}()
	return r.chessUsersChannel, nil

}

// ChessRequest is the resolver for the chessRequest field.
func (r *subscriptionResolver) ChessRequest(ctx context.Context) (<-chan *model.ChessRequest, error) {
	r.chessRequestsChannel = make(chan *model.ChessRequest)
	go func() {
		for {
			select {
			case chessRequest := <-r.chessRequestsChannel:
				fmt.Println("Chess Request: ", chessRequest)

			default:
				fmt.Println("Channel closed")

				return
			}
		}
	}()
	return r.chessRequestsChannel, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
